#include <bits/stdc++.h>
long long int res = 0;
void merge(long long int *arr, long long int left, long long int mid, long long int right)
{
	long long n1 = mid-left+1, n2 = right - mid;
	long long leftArr[n1], rightArr[n2];
	for(long long i = 0; i < n1; i++){
		leftArr[i] = arr[left + i];
	}
	for(long long i = 0; i < n2; i++){
		rightArr[i] = arr[mid+1+i];
	}
	
    int i = 0, j = 0, k = left;
	while(i < n1 && j < n2){
		if(leftArr[i] <= rightArr[j]){
			arr[k++] = leftArr[i++];
		}else{
			arr[k++] = rightArr[j++];
			res += (n1-i);
		}
	}
	while(i < n1){
       arr[k++] = leftArr[i++];
     }
     while(j < n2){
       arr[k++] = rightArr[j++];
      }
}
void mergeSort(long long *arr, long long left, long long right){
	if(left >= right){
		return;
	}
	long long mid = (left+right)/2;
	mergeSort(arr, left, mid);
	mergeSort(arr, mid+1, right);
	merge(arr, left, mid, right);
}

long long getInversions(long long *arr, int n){
    // Write your code here.
	mergeSort(arr, 0, n-1);
	return res;
}
