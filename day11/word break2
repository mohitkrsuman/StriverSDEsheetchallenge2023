#include <bits/stdc++.h> 
class TrieNode{
public:
   TrieNode *links[26];
   bool flag;

   TrieNode(){
       for(int i = 0; i < 26; i++){
           links[i] = NULL;
       }
       flag = false;
   }

   bool containKey(char ch){
       return links[ch-'a'] != NULL;
   }

   void put(char ch, TrieNode* node){
       links[ch-'a'] = node;
   }

   TrieNode *get(char ch){
      return links[ch-'a'];
   }

   bool isEnd(){
       return flag;
   }

};

class Trie{
public:
    TrieNode *root;
    Trie(){
        root = new TrieNode();
    }

    void insert(string word){
        TrieNode* node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node->containKey(word[i])){
                node->put(word[i], new TrieNode());
            }
            node = node->get(word[i]);
        }
        node->flag = true;
    }

    bool search(string word){
        TrieNode *node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node->containKey(word[i])){
                return false;
            }
            node = node->get(word[i]);
        }
        return node->isEnd();
    }
};

vector<string> ans;
Trie *root;

void solve(const string &s, string st, int pos){
    if(pos == s.size()){
        ans.push_back(st);
        return;
    }

    st += " ";
    for(int i = pos; i < s.size(); i++){
        if(root->search(s.substr(pos, i+1-pos))){
            solve(s, st+s.substr(pos, i+1-pos), i+1);
        }
    }
}

void solve(string s, vector<string>& res, unordered_set<string>& st, vector<string>&temp){
        if(s.length() == 0){
            string str = "";
            for(auto it:temp){
                str += it + " ";
            }
            str.pop_back();
            res.push_back(str);
            return;
        }
        for(int i=0;i<s.length(); i++){
            if(st.count(s.substr(0, i+1))){
                temp.push_back(s.substr(0, i+1));
                solve(s.substr(i+1), res, st, temp);
                temp.pop_back();
            }
        }
    }
vector<string> wordBreak(string &s, vector<string> &dictionary)
{
    // Write your code here
    vector<string>res, temp;
        unordered_set<string>st(dictionary.begin(), dictionary.end());
        
        solve(s, res, st, temp);
        return res;

}
