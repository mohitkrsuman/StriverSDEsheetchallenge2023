#include <bits/stdc++.h> 

bool solve(int idx, int target, vector<int> &arr, vector<vector<int>> &dp){
    if(target == 0) return true;

    if(idx == 0){
        return arr[0] == target;
    }

    if(dp[idx][target] != -1) return dp[idx][target];
    bool take = false;

    if(arr[idx] <= target){
        take = solve(idx-1, target - arr[idx], arr, dp);
    }
    bool not_take = solve(idx-1, target, arr, dp);

    return dp[idx][target] = take || not_take;
}

int solveTab(int n, int k, vector<int> &arr){
    vector<vector<bool>> dp(n, vector<bool>(k+1, 0));

    for(int i = 0; i < n; i++) dp[i][0] = true;
    dp[0][arr[0]] = true;

    for(int i = 1; i < n; i++){
        for(int target = 1; target <= k; target++){
            bool notTake = dp[i-1][target];
            bool take = false;
            
            if(arr[i] <= target){
                take = dp[i-1][target - arr[i]];
            }

            dp[i][target] = take | notTake;
        }
    }

    return dp[n-1][k];
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<int>> dp(n+1, vector<int>(k+1, -1));

    // return solve(n-1, k, arr, dp);
    return solveTab(n, k , arr);
}
