#include <bits/stdc++.h>

struct Node{
    int key, val, cnt;
    Node *next, *prev;
    
    Node(int key, int val){
        this->key = key;
        this->val = val;
        cnt = 1;
    }
};

struct List{
    int size;
    Node *head, *tail;
    
    List(){
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head->next = tail;
        tail->prev = head;
        size = 0;
    }
    
    void addNode(Node *newNode){
        Node *temp = head->next;
        newNode->next = temp;
        newNode->prev = head;
        temp->prev = newNode;
        head->next = newNode;
        size++;
    }
    
    void deleteNode(Node *delNode){
        Node *delNext = delNode->next;
        Node *delPrev = delNode->prev;
        delPrev->next = delNext;
        delNext->prev = delPrev;
        size--;
    }
};


class LFUCache {
    unordered_map<int, Node*>keyNode;
    unordered_map<int, List*> freqListMap;
    int maxSizeCache;
    int minFreq;
    int curSize;
    
public:
    LFUCache(int capacity) {
        maxSizeCache = capacity;
        minFreq = 0;
        curSize = 0;
    }
    
    void updateFreqList(Node *node){
       // remove node from keyNode and from the freqListMap
        keyNode.erase(node->key);
        freqListMap[node->cnt]->deleteNode(node);
        
        // updating the minFreq, existing now 1, 2 or anything
        // if curr node is minFreq and it's size is 0 then increment the minFreq
        if(node->cnt == minFreq && freqListMap[node->cnt]->size == 0){
            minFreq++;
        }
        
        // if that list already existing just give it to it
        List *nextHigherFreqList = new List();
        if(freqListMap.find(node->cnt + 1) != freqListMap.end()){
            nextHigherFreqList = freqListMap[node->cnt+1];
        }
        
        // incrementing the freq as this node it recently used
        node->cnt += 1;
        nextHigherFreqList->addNode(node);
        freqListMap[node->cnt] = nextHigherFreqList;
        keyNode[node->key] = node;
        
    }
    
    int get(int key) {
        if(keyNode.find(key) != keyNode.end()){
            Node *resNode = keyNode[key];
            int val = resNode->val;
            updateFreqList(resNode);
            return val;
        }
        
        return -1;
    }
    
    void put(int key, int value) {
        if(maxSizeCache == 0) return;
        if(keyNode.find(key) != keyNode.end()){
            Node *node = keyNode[key];
            node->val = value;
            updateFreqList(node);
        }else{
            
            if(curSize == maxSizeCache){
                // if not present we have to put element in minFreq
                List *list = freqListMap[minFreq];
                keyNode.erase(list->tail->prev->key);
                freqListMap[minFreq]->deleteNode(list->tail->prev);
                curSize--;
            }
            
            curSize++;
            // new value has to be added which not anywhere
            minFreq = 1;
            List *listFreq = new List();
            if(freqListMap.find(minFreq) != freqListMap.end()){
                listFreq = freqListMap[minFreq];
            }
            
            Node *newNode = new Node(key, value);
            listFreq->addNode(newNode);
            keyNode[key] = newNode;
            freqListMap[minFreq] = listFreq;
        }
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
