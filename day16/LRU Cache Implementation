#include<bits/stdc++.h>

class Node{
public:
    int key, value;
    Node *next, *prev;
    
    Node(int key, int value){
        this->key = key;
        this->value = value;
    }
};



class LRUCache {
    Node *head = new Node(-1, -1);
    Node *tail = new Node(-1, -1);
    unordered_map<int, Node*> m;
    int cap;
public:
    LRUCache(int capacity) {
        head->next = tail;
        tail->prev = head;
        cap = capacity;
    }
    
    // i have created addNode and deletenode
    void addNode(Node *newNode){
        Node *temp = head->next;
        newNode->next = temp;
        newNode->prev = head;
        temp->prev = newNode;
        head->next = newNode;
    }
    
    void deleteNode(Node *delNode){
        Node *delPrev = delNode->prev;
        Node *delNext = delNode->next;
        
        delPrev->next = delNext;
        delNext->prev = delPrev;
    }
    
    
    int get(int key) {
        // return the value stores corresponding to key
        if(m.find(key) != m.end()){
            Node *resNode = m[key];
            int res = resNode->value;
            
            m.erase(key);
            deleteNode(resNode);
            addNode(resNode);
            m[key] = head->next;
            return res;
        }
        
        return -1;
    }
    
    void put(int key, int value) {
        if(m.find(key) != m.end()){
            Node *existingNode = m[key];
            m.erase(key);
            deleteNode(existingNode);
        }
        
        if(m.size() == cap){
            m.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        
        addNode(new Node(key, value));
        // address of that node = head->next (as we are adding the node just after head)
        m[key] = head->next;
         
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
