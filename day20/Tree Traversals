#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

vector<int> iterativeInorder(BinaryTreeNode<int> *root){
    stack<BinaryTreeNode<int>*> pendingNodes;
    BinaryTreeNode<int> *curr = root;
    vector<int> res;

    while(true){
       if(curr != NULL){
           pendingNodes.push(curr);
           curr = curr->left;
       }else{
           if(pendingNodes.empty()){
               break;
           }
           curr = pendingNodes.top();
           pendingNodes.pop();
           res.push_back(curr->data);
           curr = curr->right;
       }
    }

    return res;
}



vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
           

    vector<vector<int>> tree;

    vector<int>pre,ino,post;

    if(root==NULL)return tree;

    stack<pair<BinaryTreeNode<int>*,int>>s;

    s.push({root,1});

    while(!s.empty()){

        auto it=s.top();

        s.pop();

        if(it.second==1){

            pre.push_back(it.first->data);

            it.second++;

            s.push(it);

            if(it.first->left!=NULL)s.push({it.first->left,1});

        }

        else if(it.second==2){

            ino.push_back(it.first->data);

            it.second++;

            s.push(it);

            if(it.first->right!=NULL)s.push({it.first->right,1});

        }

        else{

            post.push_back(it.first->data);

        }

    }

    tree.push_back(ino);

   tree.push_back(pre);

   tree.push_back(post);

   return tree;
}
