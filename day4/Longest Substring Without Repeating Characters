class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        // vector<int> dict(256, -1);
        // int maxLen = 0, start = -1;
        // for (int i = 0; i != s.length(); i++) {
        //     if (dict[s[i]] > start)
        //         start = dict[s[i]];
        //     dict[s[i]] = i;
        //     maxLen = max(maxLen, i - start);
        // }
        // return maxLen;
        
        // Approach- 2> using two pointer
            unordered_set<char> st;
             int maxi = 0;
             int i = 0, j = 0;

             while(i < s.size()){
                 if(st.find(s[i]) == st.end()){
                     maxi = max(maxi, i-j+1);
                     st.insert(s[i]);
                     i++;
                 }else{
                     st.erase(s[j++]);
                 }
             }

             return maxi;
    }
};
