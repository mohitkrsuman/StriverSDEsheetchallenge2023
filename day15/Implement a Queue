#include <bits/stdc++.h> 

class Node{
public:
   int data;
   Node *next;

   Node(int d){
       data = d;
       next = NULL;
   }
};



class Queue {
  Node *head, *tail;
public:

    Queue() {
      head = tail = NULL;
    }

    /*----------------- Public Functions of Queue -----------------*/

    bool isEmpty() {
        // Implement the isEmpty() function
        return (head == NULL && tail == NULL);
        
    }

    void enqueue(int data) {
        Node *temp = new Node(data);

        if(tail == NULL){
            head = temp;
            tail = temp;
            return;
        }
        tail->next = temp;
        tail = temp;
        // Implement the enqueue() function
        
        
    }

    int dequeue() {
        // Implement the dequeue() function
        if(head == NULL){
            return -1;
        }
        Node *temp = head;
        head = head->next;
        if(head == NULL){
            tail = NULL;
        }
        int val = temp->data;
        delete temp;
        return val;
        
    }

    int front() {
        // Implement the front() function
        if(head == NULL) return -1;
        return (head->data);
        
    }
};


/*

class Queue {
    int *arr;
    int qFront, qRear, size;
public:

    Queue() {
        // Implement the Constructor
        size = 10001;
        arr = new int[size];
        qFront = qRear = 0;
        
    }
*/
    /*----------------- Public Functions of Queue -----------------*/
/*
    bool isEmpty() {
        // Implement the isEmpty() function
        return qFront == qRear;
        
    }

    void enqueue(int data) {
        // Implement the enqueue() function
        if(qRear == size){
            return;
        }

        arr[qRear] = data;
        qRear++;
        
    }

    int dequeue() {
        // Implement the dequeue() function
        if(qFront == qRear){
            return -1;
        }else{
            int dequeued = arr[qFront];
            arr[qFront] = -1;
            qFront++;

            if(qFront == qRear){
                qFront = qRear = 0;
            }
            return dequeued;
        }
    }

    int front() {
        // Implement the front() function
        if(qFront == qRear){
            return -1;
        }

        return arr[qFront];
    }
};

*/
