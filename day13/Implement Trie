/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */


class TrieNode{
public:

  TrieNode *links[26];
  bool flag;
  TrieNode(){
      for(int i = 0; i < 26; i++){
          links[i] = NULL;
      }

      flag = false;
  }

  bool containKey(char ch){
      return links[ch-'a'] != NULL;
  }

  void put(char ch, TrieNode *node){
      links[ch-'a'] = node;
  }

  TrieNode* get(char ch){
      return links[ch-'a'];
  }

  void setEnd(){
      flag = true;
  }

  bool isEnd(){
      return flag;
  }
};


class Trie {

public:

    /** Initialize your data structure here. */
    TrieNode *root;
    Trie() {
        root = new TrieNode();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode *node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node->containKey(word[i])){
                node->put(word[i], new TrieNode());
            }

            node = node->get(word[i]);
        }

        node->setEnd();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode *node = root;
        for(int i = 0; i < word.length(); i++){
            if(!node->containKey(word[i])){
                return false;
            }
            node = node->get(word[i]);
        }
        return  node->isEnd();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
       TrieNode *node = root;
       int i = 0;
       for(i = 0; i < prefix.length(); i++){
           if(!node->containKey(prefix[i])){
               return false;
           }
           node = node->get(prefix[i]);
       }

       return i == prefix.length();
    }
};
