#include <bits/stdc++.h> 
typedef long long ll;


int ans;

void merge(long long *arr, ll low, ll mid, ll high){
    ll n1 = mid-low+1, n2 = high-mid;
    ll arr1[n1], arr2[n2];

    for(int i = 0; i < n1; i++){
        arr1[i] = arr[low+i];
    }

    for(int j = 0; j < n2; j++){
        arr2[j] = arr[mid+j+1];
    }

    ll i = 0, j = 0, k = low;
    
    while(i < n1 && j < n2){
        if(arr1[i] <= arr2[j]){
            arr[k++] = arr1[i++];
        }else{
            ans += n1 - i;
            arr[k++] = arr2[j++]; 
        }
    }

    while(i < n1){
        arr[k++] = arr1[i++];
    }

    while(j < n2){
        arr[k++] = arr2[j++];
    }
}


void mergeSort(long long* arr, ll low, ll high){
    if(low >= high) return ;
    int mid = low + (high - low)/2;
    
    mergeSort(arr, low, mid);
    mergeSort(arr, mid+1, high);
    merge(arr, low, mid, high);
}

long long getInversions(long long *arr, int n){
    // Write your code here.
   ans = 0;
   mergeSort(arr, 0, n-1);

   return ans;
}
