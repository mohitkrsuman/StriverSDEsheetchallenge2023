#include <bits/stdc++.h> 

// we are traversing from bottom to top
int solve(int i, int j, vector<vector<int>> dp){
	// found path
   if(i == 0 || j == 0) return 1;
   // not found path
   if(i < 0 || j < 0) return 1;

   if(dp[i][j] != -1) return dp[i][j];

   int up = solve(i-1, j, dp);
   int left = solve(i, j-1, dp);

   return dp[i][j] = up + left;
}

int solveDP(int n, int m){
	vector<vector<int>> dp(n, vector<int>(m, 1));
   
    for(int i = 1; i < n; i++){
		for(int j = 1; j < m; j++){
			dp[i][j] = dp[i-1][j] + dp[i][j-1];
		}
	}

   return dp[n-1][m-1];
}

int solveSpace(int n, int m){
	vector<int> prev(m, 0), curr(m, 0);

    for(int i = 1; i < n; i++){
        for(int j = 1; j < m; j++){
			if(i == 0 || j == 0) curr[j] = 1;
			else{
				int up = 0;
				int left = 0;
				if(i > 0) up = prev[j];
				if(j > 0) left = curr[j-1];
				curr[j] = up + left;
			}
		}
		prev = curr;
	}

	return prev[m-1];
}



int uniquePaths(int m, int n) {
	// Write your code here.
	vector<vector<int>> dp(m, vector<int>(n, -1));
	// return solve(m-1, n-1, dp);
	return solveDP(m, n);
	// return solveSpace(m, n);

}
